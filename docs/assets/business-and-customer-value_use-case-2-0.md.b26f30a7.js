import{S as s}from"./chunks/Summary.851e4d1b.js";import{o as a,c as t,D as i,x as e,a as r,N as o}from"./chunks/framework.9289536d.js";const n="/assets/business-and-customer-value_Use_case_2.76397367.jpg",l=e("h1",{id:"use-case-2-0",tabindex:"-1"},[r("Use Case 2.0 "),e("a",{class:"header-anchor",href:"#use-case-2-0","aria-label":'Permalink to "Use Case 2.0"'},"​")],-1),c=o('<img class="method-img" src="'+n+'"><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Use Cases 2.0 are a tool for using established requirements engineering methodologies in an agile approach.</p><h2 id="definition" tabindex="-1">Definition <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;Definition&quot;">​</a></h2><p>The core principle of Use Cases 2.0 is the so-called slicing, the splitting of a use case into smaller units. A so-called use case slice can be realized in one sprint.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-label="Permalink to &quot;Motivation&quot;">​</a></h2><p>This method brings together the benefits of use cases and user stories and combines them into a single concept.</p><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><p>Requirements are written in such a way that they can be implemented in sprints, while still providing an overall view of the system being developed and its relationships.</p><h2 id="benefit" tabindex="-1">Benefit <a class="header-anchor" href="#benefit" aria-label="Permalink to &quot;Benefit&quot;">​</a></h2><p>This approach provides an overall view of the system, as well as the dependencies and relationships of the requirements. This allows for better traceability and structuring of requirements. In addition, use case stories help to get an overview of already completed system parts during implementation.</p><h2 id="procedure" tabindex="-1">Procedure <a class="header-anchor" href="#procedure" aria-label="Permalink to &quot;Procedure&quot;">​</a></h2><p>The following terms describe this method: <br><strong>Flow:</strong> Describing a full or partial path through a narrative use case. There is always one basic flow and there can be alternative flows. <br><strong>Basic flow:</strong> The description of the normal, straight-line walk through the use case. It is therefore the most important part of the narrative use case and is used most frequently by the actors. <br><strong>Alternative flow:</strong> Description of the variant or the optional behavior as part of a narrative use case. <br><strong>Story:</strong> By using a story, the user gets the option to use a valuable system. In Use Case 2.0, a story is described by the narrative use case, one or several flows, requirements and one or several test cases. A story is in consequence not identical to a user story from Scrum. <br><strong>Use case model:</strong> A use case model consists mainly of a number of actors and use cases, as well as diagrams that visualize their relationships. <br><strong>Use case slice:</strong> A use case slice unites one or more stories that are selected from a use case and represent a unique value for users. Rules for defining use case slices: Use case slices have to be cut so small that they can be implemented in one sprint. The first use case story is called basic flow. It will be implemented first. Each slice needs to have at least one test case. If two use case slices contain the same use case stories, they must contain different test cases. <br> There exist two ways to generate use cases: Top-down, i.e. determine individual steps, processes and alternatives based on the use case. And bottom-up, i.e. by using brainstorming, brainwriting or brain dumping and to combine them in use cases.</p><h2 id="tools" tabindex="-1">Tools <a class="header-anchor" href="#tools" aria-label="Permalink to &quot;Tools&quot;">​</a></h2><p>Flipchart, pens, sticky notes</p><h2 id="hints" tabindex="-1">Hints <a class="header-anchor" href="#hints" aria-label="Permalink to &quot;Hints&quot;">​</a></h2><p>Use Case 2.0 is suitable for both agile and traditional waterfall development because it is scalable.</p><h2 id="see-also" tabindex="-1">See also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;See also&quot;">​</a></h2><p>Ursula Meseberg (2015) <a href="https://heise.de/-2535642" target="_blank" rel="noreferrer">&quot;Use Case 2.0: Agile Projektplanung mit Use Case Slices&quot;</a> heise online,Dr. Ivar Jacobson, Ian Spence, Kurt Bittner (2011) <a href="https://www.ivarjacobson.com/publications/white-papers/use-case-20-e-book" target="_blank" rel="noreferrer">&quot;Use-Case 2.0 - The guide to Succeeding with Use Cases&quot;</a></p>',19),f=JSON.parse('{"title":"Use Case 2.0","description":"","frontmatter":{},"headers":[],"relativePath":"business-and-customer-value/use-case-2-0.md"}'),h={name:"business-and-customer-value/use-case-2-0.md"},g=Object.assign(h,{setup(u){return(d,m)=>(a(),t("div",null,[l,i(s,{subject:"Business and customer value",participants:"The entire team",facilitator:"Agile Coach / Agile Master"}),c]))}});export{f as __pageData,g as default};
